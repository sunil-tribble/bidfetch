version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bidfetch-postgres
    environment:
      POSTGRES_USER: bidfetch
      POSTGRES_PASSWORD: bidfetch_secure_password
      POSTGRES_DB: bidfetch
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bidfetch"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB for raw data storage
  mongodb:
    image: mongo:6-jammy
    container_name: bidfetch-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: bidfetch
      MONGO_INITDB_ROOT_PASSWORD: bidfetch_secure_password
      MONGO_INITDB_DATABASE: bidfetch
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: bidfetch-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO for S3-compatible document storage
  minio:
    image: minio/minio:latest
    container_name: bidfetch-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # BidFetch API Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bidfetch-api
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://bidfetch:bidfetch_secure_password@postgres:5432/bidfetch
      MONGODB_URI: mongodb://bidfetch:bidfetch_secure_password@mongodb:27017/bidfetch?authSource=admin
      REDIS_URL: redis://redis:6379
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      S3_BUCKET: bidfetch-documents
      PORT: 3000
      ENABLE_SCHEDULER: "true"
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  # Worker service for background jobs
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bidfetch-worker
    command: npm run worker
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://bidfetch:bidfetch_secure_password@postgres:5432/bidfetch
      MONGODB_URI: mongodb://bidfetch:bidfetch_secure_password@mongodb:27017/bidfetch?authSource=admin
      REDIS_URL: redis://redis:6379
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      S3_BUCKET: bidfetch-documents
      WORKER_CONCURRENCY: 5
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: bidfetch-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: bidfetch-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: redis-datasource
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data: