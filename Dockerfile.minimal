# Build stage
FROM --platform=linux/amd64 node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies
RUN npm ci

# Copy source code
COPY src/index-minimal.ts ./src/index.ts
COPY src/index-minimal.ts ./src/index-minimal.ts
COPY tsconfig.json ./

# Create minimal tsconfig
RUN echo '{"compilerOptions":{"target":"ES2020","module":"commonjs","outDir":"./dist","rootDir":"./src","strict":false,"esModuleInterop":true,"skipLibCheck":true,"forceConsistentCasingInFileNames":true},"include":["src/**/*"]}' > tsconfig.json

# Build TypeScript
RUN npx tsc

# Production stage
FROM --platform=linux/amd64 node:18-alpine AS production

WORKDIR /app

# Install only necessary packages
RUN apk add --no-cache curl

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Copy package files
COPY package*.json ./

# Install production dependencies only
RUN npm ci --only=production && \
    npm cache clean --force

# Copy built application from builder
COPY --from=builder /app/dist ./dist

# Create necessary directories and set permissions
RUN mkdir -p logs data public && chown -R nodejs:nodejs . logs data public dist

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Start directly with node (no dumb-init)
CMD ["node", "dist/index.js"]