import React, { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useSearchParams, Link } from 'react-router-dom';\nimport { \n  Search as SearchIcon, \n  Filter, \n  SortAsc, \n  SortDesc, \n  Calendar,\n  Building,\n  Globe,\n  DollarSign,\n  FileText,\n  Clock,\n  Eye,\n  Bookmark,\n  Download,\n  ExternalLink,\n  MapPin,\n  Tag\n} from 'lucide-react';\nimport { format } from 'date-fns';\nimport { useNotifications } from '../context/NotificationContext';\nimport { useWebSocket } from '../context/WebSocketContext';\n\ninterface Opportunity {\n  id: string;\n  title: string;\n  description: string;\n  agency: string;\n  office: string;\n  source: string;\n  status: 'active' | 'closed' | 'awarded' | 'cancelled';\n  posted_date: string;\n  response_deadline: string;\n  estimated_value: number;\n  naics_codes: string[];\n  psc_codes: string[];\n  set_aside_type: string;\n  documents: string[];\n  location: string;\n  type: string;\n}\n\ninterface SearchFilters {\n  query: string;\n  sources: string[];\n  agencies: string[];\n  statuses: string[];\n  minValue: number | null;\n  maxValue: number | null;\n  dateRange: string;\n  naicsCodes: string[];\n  setAsideTypes: string[];\n  sortBy: string;\n  sortOrder: 'asc' | 'desc';\n}\n\nconst Search: React.FC = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [showFilters, setShowFilters] = useState(false);\n  const [selectedOpportunities, setSelectedOpportunities] = useState<string[]>([]);\n  const [savedSearches, setSavedSearches] = useState<string[]>([]);\n  const { addNotification } = useNotifications();\n  const { subscribe } = useWebSocket();\n\n  const [filters, setFilters] = useState<SearchFilters>({\n    query: searchParams.get('q') || '',\n    sources: searchParams.getAll('source'),\n    agencies: searchParams.getAll('agency'),\n    statuses: searchParams.getAll('status') || ['active'],\n    minValue: searchParams.get('minValue') ? parseInt(searchParams.get('minValue')!) : null,\n    maxValue: searchParams.get('maxValue') ? parseInt(searchParams.get('maxValue')!) : null,\n    dateRange: searchParams.get('dateRange') || '30d',\n    naicsCodes: searchParams.getAll('naics'),\n    setAsideTypes: searchParams.getAll('setAside'),\n    sortBy: searchParams.get('sortBy') || 'posted_date',\n    sortOrder: (searchParams.get('sortOrder') as 'asc' | 'desc') || 'desc'\n  });\n\n  // Fetch search results\n  const { data: searchResults, isLoading, error, refetch } = useQuery({\n    queryKey: ['search-opportunities', filters],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (filters.query) params.append('q', filters.query);\n      filters.sources.forEach(source => params.append('source', source));\n      filters.agencies.forEach(agency => params.append('agency', agency));\n      filters.statuses.forEach(status => params.append('status', status));\n      if (filters.minValue) params.append('minValue', filters.minValue.toString());\n      if (filters.maxValue) params.append('maxValue', filters.maxValue.toString());\n      params.append('dateRange', filters.dateRange);\n      filters.naicsCodes.forEach(code => params.append('naics', code));\n      filters.setAsideTypes.forEach(type => params.append('setAside', type));\n      params.append('sortBy', filters.sortBy);\n      params.append('sortOrder', filters.sortOrder);\n      params.append('limit', '50');\n      \n      const response = await fetch(`/api/opportunities/search?${params.toString()}`);\n      if (!response.ok) throw new Error('Search failed');\n      return response.json();\n    },\n    refetchInterval: 60000, // Refetch every minute\n  });\n\n  // Fetch filter options\n  const { data: filterOptions } = useQuery({\n    queryKey: ['filter-options'],\n    queryFn: async () => {\n      const response = await fetch('/api/opportunities/filters');\n      if (!response.ok) throw new Error('Failed to fetch filter options');\n      return response.json();\n    },\n  });\n\n  // Mock data for demonstration\n  const mockResults = {\n    data: [\n      {\n        id: '1',\n        title: 'Cloud Infrastructure Modernization Services',\n        description: 'Comprehensive cloud migration and modernization services for legacy government systems. Includes assessment, planning, migration, and ongoing support.',\n        agency: 'Department of Defense',\n        office: 'Defense Information Systems Agency',\n        source: 'SAM.gov',\n        status: 'active' as const,\n        posted_date: '2024-07-15T10:30:00Z',\n        response_deadline: '2024-09-15T17:00:00Z',\n        estimated_value: 25000000,\n        naics_codes: ['541511', '541512'],\n        psc_codes: ['D316'],\n        set_aside_type: 'None',\n        documents: ['RFP.pdf', 'SOW.pdf', 'Requirements.docx'],\n        location: 'Fort Belvoir, VA',\n        type: 'Request for Proposal'\n      },\n      {\n        id: '2',\n        title: 'AI-Powered Data Analytics Platform Development',\n        description: 'Development of an advanced AI-powered analytics platform for processing and analyzing large-scale government data sets with real-time insights and predictive capabilities.',\n        agency: 'Department of Veterans Affairs',\n        office: 'Office of Information and Technology',\n        source: 'Grants.gov',\n        status: 'active' as const,\n        posted_date: '2024-07-20T14:15:00Z',\n        response_deadline: '2024-08-28T16:00:00Z',\n        estimated_value: 15000000,\n        naics_codes: ['541511', '541715'],\n        psc_codes: ['D302'],\n        set_aside_type: 'Small Business',\n        documents: ['RFP.pdf', 'Technical_Specs.pdf'],\n        location: 'Washington, DC',\n        type: 'Request for Proposal'\n      },\n      {\n        id: '3',\n        title: 'Cybersecurity Assessment and Implementation',\n        description: 'Comprehensive cybersecurity assessment, vulnerability testing, and implementation of security measures across multiple government facilities and systems.',\n        agency: 'General Services Administration',\n        office: 'Federal Acquisition Service',\n        source: 'FPDS',\n        status: 'active' as const,\n        posted_date: '2024-07-18T09:45:00Z',\n        response_deadline: '2024-09-30T17:00:00Z',\n        estimated_value: 8500000,\n        naics_codes: ['541512', '541519'],\n        psc_codes: ['D316'],\n        set_aside_type: '8(a)',\n        documents: ['SOW.pdf', 'Security_Requirements.pdf', 'Compliance.pdf'],\n        location: 'Multiple Locations',\n        type: 'Request for Proposal'\n      }\n    ],\n    total: 156,\n    page: 1,\n    limit: 50\n  };\n\n  const mockFilterOptions = {\n    sources: ['SAM.gov', 'Grants.gov', 'FPDS', 'TED EU', 'UK Contracts', 'UN Global'],\n    agencies: ['Department of Defense', 'Department of Veterans Affairs', 'General Services Administration', 'Department of Energy', 'Department of Health and Human Services'],\n    setAsideTypes: ['None', 'Small Business', '8(a)', 'HubZone', 'SDVOSB', 'WOSB'],\n    naicsCodes: ['541511', '541512', '541519', '541715', '334510', '237130']\n  };\n\n  const displayResults = searchResults || mockResults;\n  const displayFilterOptions = filterOptions || mockFilterOptions;\n\n  // Update URL params when filters change\n  useEffect(() => {\n    const params = new URLSearchParams();\n    if (filters.query) params.set('q', filters.query);\n    filters.sources.forEach(source => params.append('source', source));\n    filters.agencies.forEach(agency => params.append('agency', agency));\n    filters.statuses.forEach(status => params.append('status', status));\n    if (filters.minValue) params.set('minValue', filters.minValue.toString());\n    if (filters.maxValue) params.set('maxValue', filters.maxValue.toString());\n    params.set('dateRange', filters.dateRange);\n    filters.naicsCodes.forEach(code => params.append('naics', code));\n    filters.setAsideTypes.forEach(type => params.append('setAside', type));\n    params.set('sortBy', filters.sortBy);\n    params.set('sortOrder', filters.sortOrder);\n    \n    setSearchParams(params);\n  }, [filters, setSearchParams]);\n\n  // Subscribe to real-time updates\n  useEffect(() => {\n    const unsubscribe = subscribe('new_opportunity', (data) => {\n      if (data.matches_search) {\n        addNotification({\n          type: 'info',\n          title: 'New Matching Opportunity',\n          message: `${data.title} matches your search criteria`,\n          duration: 5000\n        });\n        refetch();\n      }\n    });\n\n    return unsubscribe;\n  }, [subscribe, addNotification, refetch]);\n\n  const updateFilter = <K extends keyof SearchFilters>(key: K, value: SearchFilters[K]) => {\n    setFilters(prev => ({ ...prev, [key]: value }));\n  };\n\n  const toggleArrayFilter = (key: keyof SearchFilters, value: string) => {\n    const currentArray = filters[key] as string[];\n    const newArray = currentArray.includes(value)\n      ? currentArray.filter(item => item !== value)\n      : [...currentArray, value];\n    updateFilter(key, newArray);\n  };\n\n  const clearAllFilters = () => {\n    setFilters({\n      query: '',\n      sources: [],\n      agencies: [],\n      statuses: ['active'],\n      minValue: null,\n      maxValue: null,\n      dateRange: '30d',\n      naicsCodes: [],\n      setAsideTypes: [],\n      sortBy: 'posted_date',\n      sortOrder: 'desc'\n    });\n  };\n\n  const saveSearch = () => {\n    const searchName = `${filters.query || 'All'} opportunities`;\n    setSavedSearches(prev => [...prev, searchName]);\n    addNotification({\n      type: 'success',\n      title: 'Search Saved',\n      message: `\"${searchName}\" has been saved`,\n      duration: 3000\n    });\n  };\n\n  const exportResults = () => {\n    addNotification({\n      type: 'info',\n      title: 'Exporting Results',\n      message: 'Your search results are being prepared for download',\n      duration: 3000\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-100 text-green-800 border-green-200';\n      case 'closed': return 'bg-gray-100 text-gray-800 border-gray-200';\n      case 'awarded': return 'bg-blue-100 text-blue-800 border-blue-200';\n      case 'cancelled': return 'bg-red-100 text-red-800 border-red-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"glass rounded-2xl p-8 text-center\">\n          <div className=\"text-red-400 mb-4\">\n            <SearchIcon className=\"h-12 w-12 mx-auto mb-4\" />\n          </div>\n          <h3 className=\"text-xl font-bold text-white mb-2\">Search Failed</h3>\n          <p className=\"text-white/70 mb-4\">Unable to perform search. Please try again.</p>\n          <button \n            onClick={() => refetch()}\n            className=\"btn-primary\"\n          >\n            Retry Search\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen py-8\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold text-white mb-4 animate-slide-up\">\n            Advanced Search\n          </h1>\n          <p className=\"text-white/70 text-lg\">\n            Search across {displayFilterOptions.sources.length} procurement platforms with powerful filters\n          </p>\n        </div>\n\n        {/* Search Bar & Controls */}\n        <div className=\"glass rounded-2xl p-6 mb-8 animate-slide-up\" style={{ animationDelay: '0.1s' }}>\n          <div className=\"flex flex-col lg:flex-row gap-4\">\n            {/* Main Search Input */}\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <SearchIcon className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-white/50\" />\n                <input\n                  type=\"text\"\n                  value={filters.query}\n                  onChange={(e) => updateFilter('query', e.target.value)}\n                  placeholder=\"Search opportunities, agencies, keywords...\"\n                  className=\"w-full pl-10 pr-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50 backdrop-blur-sm\"\n                />\n              </div>\n            </div>\n\n            {/* Filter Toggle */}\n            <button\n              onClick={() => setShowFilters(!showFilters)}\n              className={`flex items-center px-4 py-3 rounded-xl transition-all duration-200 ${\n                showFilters \n                  ? 'bg-white/20 text-white' \n                  : 'bg-white/10 text-white/70 hover:bg-white/15 hover:text-white'\n              }`}\n            >\n              <Filter className=\"h-5 w-5 mr-2\" />\n              Filters\n            </button>\n\n            {/* Sort Control */}\n            <div className=\"flex items-center space-x-2\">\n              <select\n                value={filters.sortBy}\n                onChange={(e) => updateFilter('sortBy', e.target.value)}\n                className=\"bg-white/10 border border-white/20 rounded-xl px-3 py-3 text-white text-sm focus:outline-none focus:ring-2 focus:ring-blue-500/50\"\n              >\n                <option value=\"posted_date\">Posted Date</option>\n                <option value=\"response_deadline\">Deadline</option>\n                <option value=\"estimated_value\">Value</option>\n                <option value=\"title\">Title</option>\n              </select>\n              <button\n                onClick={() => updateFilter('sortOrder', filters.sortOrder === 'asc' ? 'desc' : 'asc')}\n                className=\"p-3 bg-white/10 border border-white/20 rounded-xl hover:bg-white/15 transition-colors\"\n              >\n                {filters.sortOrder === 'asc' ? \n                  <SortAsc className=\"h-5 w-5 text-white\" /> : \n                  <SortDesc className=\"h-5 w-5 text-white\" />\n                }\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Advanced Filters */}\n        {showFilters && (\n          <div className=\"glass rounded-2xl p-6 mb-8 animate-slide-up\" style={{ animationDelay: '0.2s' }}>\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              {/* Data Sources */}\n              <div>\n                <h4 className=\"text-white font-medium mb-3 flex items-center\">\n                  <Globe className=\"h-4 w-4 mr-2\" />\n                  Data Sources\n                </h4>\n                <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n                  {displayFilterOptions.sources.map((source) => (\n                    <label key={source} className=\"flex items-center text-sm\">\n                      <input\n                        type=\"checkbox\"\n                        checked={filters.sources.includes(source)}\n                        onChange={() => toggleArrayFilter('sources', source)}\n                        className=\"mr-2 rounded border-white/20 bg-white/10 text-blue-500 focus:ring-blue-500/50\"\n                      />\n                      <span className=\"text-white/70\">{source}</span>\n                    </label>\n                  ))}\n                </div>\n              </div>\n\n              {/* Agencies */}\n              <div>\n                <h4 className=\"text-white font-medium mb-3 flex items-center\">\n                  <Building className=\"h-4 w-4 mr-2\" />\n                  Agencies\n                </h4>\n                <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n                  {displayFilterOptions.agencies.map((agency) => (\n                    <label key={agency} className=\"flex items-center text-sm\">\n                      <input\n                        type=\"checkbox\"\n                        checked={filters.agencies.includes(agency)}\n                        onChange={() => toggleArrayFilter('agencies', agency)}\n                        className=\"mr-2 rounded border-white/20 bg-white/10 text-blue-500 focus:ring-blue-500/50\"\n                      />\n                      <span className=\"text-white/70 truncate\">{agency}</span>\n                    </label>\n                  ))}\n                </div>\n              </div>\n\n              {/* Value Range */}\n              <div>\n                <h4 className=\"text-white font-medium mb-3 flex items-center\">\n                  <DollarSign className=\"h-4 w-4 mr-2\" />\n                  Value Range\n                </h4>\n                <div className=\"space-y-3\">\n                  <div>\n                    <label className=\"block text-xs text-white/50 mb-1\">Minimum ($)</label>\n                    <input\n                      type=\"number\"\n                      value={filters.minValue || ''}\n                      onChange={(e) => updateFilter('minValue', e.target.value ? parseInt(e.target.value) : null)}\n                      placeholder=\"0\"\n                      className=\"w-full px-3 py-2 bg-white/10 border border-white/20 rounded-lg text-white text-sm focus:outline-none focus:ring-2 focus:ring-blue-500/50\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-xs text-white/50 mb-1\">Maximum ($)</label>\n                    <input\n                      type=\"number\"\n                      value={filters.maxValue || ''}\n                      onChange={(e) => updateFilter('maxValue', e.target.value ? parseInt(e.target.value) : null)}\n                      placeholder=\"No limit\"\n                      className=\"w-full px-3 py-2 bg-white/10 border border-white/20 rounded-lg text-white text-sm focus:outline-none focus:ring-2 focus:ring-blue-500/50\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Filter Actions */}\n            <div className=\"flex items-center justify-between mt-6 pt-6 border-t border-white/10\">\n              <button\n                onClick={clearAllFilters}\n                className=\"text-white/70 hover:text-white text-sm transition-colors\"\n              >\n                Clear All Filters\n              </button>\n              <div className=\"flex items-center space-x-3\">\n                <button\n                  onClick={saveSearch}\n                  className=\"btn-secondary\"\n                >\n                  <Bookmark className=\"h-4 w-4 mr-2\" />\n                  Save Search\n                </button>\n                <button\n                  onClick={exportResults}\n                  className=\"btn-primary\"\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export Results\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Results Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center space-x-4\">\n            <h2 className=\"text-2xl font-bold text-white\">\n              {isLoading ? 'Searching...' : `${displayResults.total.toLocaleString()} Results`}\n            </h2>\n            {filters.query && (\n              <span className=\"text-white/60\">for \"{filters.query}\"</span>\n            )}\n          </div>\n          <div className=\"text-white/60 text-sm\">\n            Updated in real-time\n          </div>\n        </div>\n\n        {/* Results */}\n        {isLoading ? (\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"glass rounded-2xl p-6 animate-pulse\">\n                <div className=\"h-4 bg-white/20 rounded mb-2\" />\n                <div className=\"h-3 bg-white/10 rounded mb-4\" />\n                <div className=\"flex space-x-4\">\n                  <div className=\"h-3 bg-white/10 rounded w-20\" />\n                  <div className=\"h-3 bg-white/10 rounded w-32\" />\n                  <div className=\"h-3 bg-white/10 rounded w-24\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {displayResults.data.map((opportunity, index) => (\n              <div \n                key={opportunity.id} \n                className=\"glass rounded-2xl p-6 hover:bg-white/5 transition-all duration-200 card-hover animate-slide-up\"\n                style={{ animationDelay: `${0.1 + index * 0.05}s` }}\n              >\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-3 mb-2\">\n                      <h3 className=\"text-xl font-bold text-white hover:text-blue-300 transition-colors\">\n                        <Link to={`/opportunity/${opportunity.id}`}>\n                          {opportunity.title}\n                        </Link>\n                      </h3>\n                      <span className={`px-2 py-1 rounded-full text-xs font-medium border ${getStatusColor(opportunity.status)}`}>\n                        {opportunity.status.toUpperCase()}\n                      </span>\n                    </div>\n                    \n                    <p className=\"text-white/70 text-sm mb-4 line-clamp-2\">\n                      {opportunity.description}\n                    </p>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm\">\n                      <div className=\"flex items-center text-white/60\">\n                        <Building className=\"h-4 w-4 mr-2\" />\n                        <div>\n                          <div className=\"font-medium text-white\">{opportunity.agency}</div>\n                          <div className=\"text-xs\">{opportunity.office}</div>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center text-white/60\">\n                        <Globe className=\"h-4 w-4 mr-2\" />\n                        <div>\n                          <div className=\"font-medium text-white\">{opportunity.source}</div>\n                          <div className=\"text-xs\">{opportunity.type}</div>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center text-white/60\">\n                        <Calendar className=\"h-4 w-4 mr-2\" />\n                        <div>\n                          <div className=\"font-medium text-white\">\n                            {format(new Date(opportunity.response_deadline), 'MMM dd, yyyy')}\n                          </div>\n                          <div className=\"text-xs\">Response Due</div>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center text-white/60\">\n                        <DollarSign className=\"h-4 w-4 mr-2\" />\n                        <div>\n                          <div className=\"font-medium text-white\">\n                            ${(opportunity.estimated_value / 1000000).toFixed(1)}M\n                          </div>\n                          <div className=\"text-xs\">Estimated Value</div>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Tags */}\n                    <div className=\"flex items-center space-x-2 mt-4\">\n                      {opportunity.naics_codes.slice(0, 2).map((code) => (\n                        <span key={code} className=\"px-2 py-1 bg-blue-500/20 text-blue-300 rounded text-xs\">\n                          NAICS {code}\n                        </span>\n                      ))}\n                      {opportunity.set_aside_type !== 'None' && (\n                        <span className=\"px-2 py-1 bg-green-500/20 text-green-300 rounded text-xs\">\n                          {opportunity.set_aside_type}\n                        </span>\n                      )}\n                      {opportunity.location && (\n                        <span className=\"px-2 py-1 bg-purple-500/20 text-purple-300 rounded text-xs flex items-center\">\n                          <MapPin className=\"h-3 w-3 mr-1\" />\n                          {opportunity.location}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Actions */}\n                  <div className=\"flex items-center space-x-2 ml-6\">\n                    <button className=\"p-2 bg-white/10 hover:bg-white/20 rounded-lg transition-colors\">\n                      <Eye className=\"h-4 w-4 text-white\" />\n                    </button>\n                    <button className=\"p-2 bg-white/10 hover:bg-white/20 rounded-lg transition-colors\">\n                      <Bookmark className=\"h-4 w-4 text-white\" />\n                    </button>\n                    <Link \n                      to={`/opportunity/${opportunity.id}`}\n                      className=\"p-2 bg-blue-500/20 hover:bg-blue-500/30 rounded-lg transition-colors\"\n                    >\n                      <ExternalLink className=\"h-4 w-4 text-blue-300\" />\n                    </Link>\n                  </div>\n                </div>\n\n                {/* Documents */}\n                {opportunity.documents.length > 0 && (\n                  <div className=\"border-t border-white/10 pt-4 mt-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <FileText className=\"h-4 w-4 text-white/60\" />\n                      <span className=\"text-white/60 text-sm font-medium\">Documents:</span>\n                      <div className=\"flex items-center space-x-2\">\n                        {opportunity.documents.slice(0, 3).map((doc, i) => (\n                          <span key={i} className=\"px-2 py-1 bg-white/10 rounded text-xs text-white/70\">\n                            {doc}\n                          </span>\n                        ))}\n                        {opportunity.documents.length > 3 && (\n                          <span className=\"text-white/50 text-xs\">\n                            +{opportunity.documents.length - 3} more\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n\n        {/* Load More / Pagination */}\n        {displayResults.total > displayResults.data.length && (\n          <div className=\"text-center mt-8\">\n            <button className=\"btn-primary\">\n              Load More Results\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Search;